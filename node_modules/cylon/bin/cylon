#!/usr/bin/env node

var Program = require('commander'),
    Pkg = require('../package.json'),
    CliCommands = require('../dist/cli/cli-commands'),
    fs = require('fs');

Program
  .version(Pkg.version)
  .usage('[command] [options]');

Program
  .command("generate <name>")
  .description("Generates a new adaptor")
  .action(function(name) { require('../src/generators/adaptor')(name) });

Program
  .command("scan <type>")
  .description("Scans serial, bluetooth or usb (pass param <serial> | <bluetooth> | <usb>) for connected devices")
  .action(function(type) {
    CliCommands.scan(type);
  });

Program
  .command("bluetooth <subcmd> <address> [option]")
  .description("Connect bluetooth device to PC (pairs) or stablishes serial to bluetooth connection")
  .action(function(subcmd, address, option){
    switch(subcmd){
    case 'pair':
      option = (option === null || option === undefined) ? 'hci0' : option;
      CliCommands.bluetooth.pair(option, address);
      break;
    case 'unpair':
      option = (option === null || option === undefined) ? 'hci0' : option;
      CliCommands.bluetooth.unpair(option, address);
      break;
    case 'connect':
      option = (option === null || option === undefined) ? '/dev/rfcomm0' : option;
      CliCommands.connectToSerial(option, address);
      break;
    default:
      console.log("cylon bluetooth argument not recognized, try:\n");
      console.log("1.- cylon bluetooth pair <address> [hciX]");
      console.log("2.- cylon bluetooth unpair <address> [hciX]");
      console.log("3.- cylon bluetooth connect <address> [dev]\n");
    }
  });

var modules_path = process.cwd() + '/node_modules/';

if (fs.existsSync(modules_path)) {
  // require all cylon-* modules
  fs.readdirSync(modules_path).forEach(function(dir) {
    if (dir.match(/^cylon-.*/) !== null) {
      if (typeof require(dir).registerCommands === 'function') {
        var Commands = require(dir).registerCommands();
        for (name in Commands) {
          var command = Commands[name];

          // get subcommand arguments
          var args = process.argv.slice(3);

          Program
            .command(name)
            .description(command.description)
            .action(function(){
              command.command(args);
            });
        }
      }
    }
  });
}

var argv = Program.parse(process.argv);

// print help if no arguments were provided
if(!Program.args.length) { Program.help(); }
